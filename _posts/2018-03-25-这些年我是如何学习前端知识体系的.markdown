---
layout:     post
title:      "这些年我是如何学习前端知识体系的"
subtitle:   "\"经验值90%来自日常工作\""
date:       2018-03-25 22:57:00
author:     "stepday"
header-img: "img/post-bg-front.jpg"
catalog: true
tags:
    - 学习
---

> “前端经验值90%来自日常工作”


## 前言
2010年毕业，先做了五年的后端开发（主程asp.net、副程数据库[Oracle/MSSQL] 附带搞搞前端页面[那个时候比较流行jQuery框架，另外就是EasyUI]。2015年6月才转岗到前端开发，这几年踩过无数坑。

---

## 正文
### 前端附带阶段
#### 第一个项目
在XXX公司做后端开发的时候，当时是采用的EasyUI框架来搭建的后台管理系统界面，是由当时的项目负责人搭建的，整体风格一般。对于后台管理系统而言最多的就是列表的呈现了，所以对前端要求不是特别的高，当时参与前端的部分不是很多，主要是涉及到一下几个点：

1、前端采用ajax与后端进行交互；

2、前端的请求get和post方式对于后端来说接收参数的方式有所差别；

3、前端表单提交前的数据完整性校验和有效性校验完全借助于jQuery和其form插件来进行的，对其里面的源码并未进行深究；

4、根据后端接口返回的json数据进行页面业务逻辑的JS脚本编写和数据呈现；

总体来说，第一个项目对前端这边的知识体系完全没有涉及太多；

#### 第二个项目
第二个项目是给一个甲方公司做的一个基于图表进行数据展现的可视化小型系统，里面会尽可能多的采用图表的形式进行数据的体现；

当时公司有一个唯一的美工妹纸，设计了一个大体的框架，然后由我来接手开始页面的切割和前端框架的搭建工作。

对于PS我也只是半路出家，关于如何正确切割的打开方式感觉都不正确。还好页面结构不是很复杂，页面结构是通畅的反T形，上方导航栏，左侧菜单，右侧内容区块，内容区块我采用了iframe来进行呈现，解决点击左侧菜单不刷新整个页面的问题。

关于涉及到的前端知识我大致罗列了以下几点：

1、页面的自适应当初选择了一种css结合js来动态根据屏大小来进行计算设置的方式，而非100%或者felx布局；

2、关于图表的呈现也是自学百度的Echarts和国外的Highcharts两大图表插件，最后处于版权因素选择了百度的ECharts2.0版本，对图表组件进行了二次封装，做到根据页面的标签配置（数据源、图表类型、图表数据关系json串、标题、副标题等）在页面加载完成后根据封装的图表引擎脚本来进行图表数据的提取、转换、渲染、呈现；

通过对着一个小项目的整体布局和把控，让我对前端这方面的知识点产生了浓厚的兴趣，于是才有了后面转岗的故事。

### 专职前端阶段
由于一些机缘巧合进入了B公司做专职前端，当初进去的时候公司有几个毕业生在做一些前端的事情：页面切割、程序对接。但是整体水平还是处于初级阶段；当前公司的产品都是基于jQuery来做的，页面都是定制化的，所以一些新的知识并未涉及，就这样懵懵懂懂的过了一年，完全没有去有意识的主导和学习当下时髦的技术，自己有些固步自封了。

最近一两年才开始系统性的学习前端方面的知识：Javascript、CSS和HTML，通过看书才知道以前从项目中得来的真是不够系统，简直就是冰山一角了，感觉道行盛浅。

1、全面了解了Javascript的历史；

2、了解Javascript的数据类型并比较其与后端语言数据类型的差别支出；

3、深入理解什么是原型、原型链；

4、深刻理解闭包、闭包的好坏；

5、充分把握页面切割的要点（PC/WAP)和页面快速布局的技巧；

6、大量运用CSS特效，采用GPU加速替换硬件加速，提升页面性能；

7、熟悉浏览器的运行机制、解析机制、渲染机制，从而制定出页面性能优化的方案；

8、了解当下流行的ES6、打包工具webpack、MVVM框架Vue、AngularJS、React等；

## 后记
一入前端深似海，是我目前最确切的感受；现在做一名合格的前端需要掌握的知识面也越来越多，不仅能够玩得转js、css、html，还要能够快速响应客户各种变态需求和页面性能优化，与多方对接的能力。现在都在提大前端的概念，想把APP原生的活给抢过来干了，恐慌中啊！


